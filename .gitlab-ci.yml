image: docker:19.03.1

variables:
  # When using dind service, we need to instruct docker, to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. docker:19.03.1 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03.1/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Note that if you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  ECR_REPO: "776942401551.dkr.ecr.sa-east-1.amazonaws.com/"

services:
  - docker:19.03.1-dind

stages:
  - build
  - test
  - push
  - deploy_staging
  - deploy_production

build_backend:
  stage: build
  script:
    - docker build -t ${ECR_REPO}backend:${CI_COMMIT_SHORT_SHA} -t ${ECR_REPO}backend:latest -f containers/backend/Dockerfile .

build_app_vendedor:
  stage: build
  script:
    - docker build --build-arg APPLICATION_NAME=app-vendedor -t app-vendedor:${CI_COMMIT_SHORT_SHA} -t app-vendedor:latest -f containers/frontend/Dockerfile .

build_frontend:
  stage: build
  script:
    - docker build --build-arg APPLICATION_NAME=frontend -t frontend:${CI_COMMIT_SHORT_SHA} -t frontend:latest -f containers/frontend/Dockerfile .

test_backend:
  stage: test
  except:
    - master
  script:
    - docker run backend pipenv run pytest

test_app_vendedor:
  stage: test
  except:
    - master
  script:
    - docker run -e CI=true app-vendedor yarn test

test_frontend:
  stage: test
  except:
    - master
  script:
    - docker run -e CI=true frontend yarn test

push_container_backend:
  stage: push
  script:
    - apt-get update && apt-get install -y awscli
    - eval $(AWS_ACCESS_KEY_ID=${AWS_ECR_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_ECR_SECRET_ACCESS_KEY} aws ecr get-login --no-include-email --region sa-east-1)
    - docker push ${ECR_REPO}backend:${CI_COMMIT_SHORT_SHA}
    - docker push ${ECR_REPO}backend:latest

deploy_staging:
  stage: deploy_staging
  when: manual
  environment:
    name: staging
    url: http://staging-1338850204.sa-east-1.elb.amazonaws.com/hello_world/
  script:
    - docker run -e AWS_ACCESS_KEY_ID=${AWS_ECS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_ECS_SECRET_ACCESS_KEY} backend pipenv run python ecs_task_deployer.py --service backend --version latest --environment staging
    - docker run -e AWS_ACCESS_KEY_ID=${AWS_S3_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY} app-vendedor bash scripts/deploy-statics.sh production app-vendedor
    - docker run -e AWS_ACCESS_KEY_ID=${AWS_S3_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY} frontend bash scripts/deploy-statics.sh production frontend

deploy_production:
  stage: deploy_production
  only:
    - master
  when: manual
  environment:
    name: production
  script:
    - docker run -e AWS_ACCESS_KEY_ID=${AWS_ECS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_ECS_SECRET_ACCESS_KEY} backend pipenv run python ecs_task_deployer.py --service backend --version latest --environment production
    - docker run -e AWS_ACCESS_KEY_ID=${AWS_S3_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY} app-vendedor bash scripts/deploy-statics.sh production app-vendedor
    - docker run -e AWS_ACCESS_KEY_ID=${AWS_S3_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY} frontend bash scripts/deploy-statics.sh production frontend
